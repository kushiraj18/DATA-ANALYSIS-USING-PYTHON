# -*- coding: utf-8 -*-
"""2030_LAB-03.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QPQhT4gxLznBpbv59B3UyGMA5l08E5AD
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
import seaborn as sns

data=pd.read_csv("/content/dermatology_database_1.csv")

data.head()

data['age'] = pd.to_numeric(data['age'], errors='coerce')
data['age'].fillna(data['age'].median(), inplace=True)

print(data.isnull().sum())

X = data.drop(columns=['class'])
y = data['class']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)

svm_model = SVC(random_state=42)
rf_model = RandomForestClassifier(random_state=42)

svm_model.fit(X_train, y_train)
rf_model.fit(X_train, y_train)

svm_predictions = svm_model.predict(X_test)
rf_predictions = rf_model.predict(X_test)

svm_accuracy = accuracy_score(y_test, svm_predictions)
rf_accuracy = accuracy_score(y_test, rf_predictions)

print(f"SVM Accuracy: {svm_accuracy}")
print(f"Random Forest Accuracy: {rf_accuracy}")

from scipy.stats import zscore

z_scores = np.abs(zscore(X))
outliers = np.where(z_scores > 3)
print(f"Outliers detected in rows: {set(outliers[0])}")

X_clean = X[(z_scores < 3).all(axis=1)]
y_clean = y[X_clean.index]

from collections import Counter
class_counts = Counter(y_clean)
for class_label, count in class_counts.items():
    if count < 2:
        print(f"Class {class_label} has only {count} sample(s) after outlier removal. Consider adjusting outlier removal or stratification strategy.")


try:
    X_train_clean, X_test_clean, y_train_clean, y_test_clean = train_test_split(
        X_clean, y_clean, test_size=0.3, random_state=42, stratify=y_clean
    )
except ValueError:
    print("Stratification failed due to a class with too few samples. Proceeding without stratification.")
    X_train_clean, X_test_clean, y_train_clean, y_test_clean = train_test_split(
        X_clean, y_clean, test_size=0.3, random_state=42
    )
svm_model.fit(X_train_clean, y_train_clean)
rf_model.fit(X_train_clean, y_train_clean)

svm_clean_predictions = svm_model.predict(X_test_clean)
rf_clean_predictions = rf_model.predict(X_test_clean)

svm_clean_accuracy = accuracy_score(y_test_clean, svm_clean_predictions)
rf_clean_accuracy = accuracy_score(y_test_clean, rf_clean_predictions)

print(f"SVM Accuracy after outlier removal: {svm_clean_accuracy}")
print(f"Random Forest Accuracy after outlier removal: {rf_clean_accuracy}")

for column in data.columns:
    plt.figure(figsize=(6, 4))
    plt.hist(data[column], bins=15, edgecolor='k', alpha=0.7)
    plt.title(f"Histogram of {column}")
    plt.xlabel(column)
    plt.ylabel("Frequency")
    plt.show()

